import dotenv from 'dotenv';
import express from 'express';
import { GoogleGenAI } from "@google/genai";
import session from 'express-session';
dotenv.config();

const app = express();
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const SESSION_SECRET = process.env.SESSION_SECRET || 'your-secret'; // It's better to use an environment variable for the secret

// express.urlencoded is the modern replacement for bodyParser.urlencoded
app.use(express.urlencoded({ extended: true }));
app.set('view engine', 'ejs');
app.use(session({ secret: SESSION_SECRET, resave: false, saveUninitialized: true }));

const ai = new GoogleGenAI({ apiKey: GEMINI_API_KEY });

app.get("/chat", (req, res) => {
    res.render("home", { data: req.session.chatData });
    // 
});

app.post("/chat", async (req, res) => {
    try {
        // Note: The form input name is 'messa'. This might be a typo for 'message'.
        const userMessage = req.body.messa;
        
        const result = await ai.models.generateContent({
            model: "gemini-2.5-flash",
            contents : userMessage,
        });
    
        // The 'generateContent' result object has a 'response' property.
        // Accessing 'candidates' directly on the result will cause a TypeError.
        const data = result.response.text();
        req.session.chatData = data;
        res.render("home", { data: data });
    } catch (error) {
        console.error("Error in /chat route:", error);
        res.status(500).send("An error occurred while processing your request.");
    }
});

app.listen(8080, () => {
    console.log("gemini-2.5-flash Listening...");
});
